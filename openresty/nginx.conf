# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    
    include       mime.types;
    #default_type  application/octet-stream;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;

    keepalive_timeout  65;

    include /etc/nginx/conf.d/*.conf;

    server {
        listen 80;
        server_name localhost;

        location / {
            root   /usr/local/openresty/nginx/html;
            index  index.html index.htm;
        }
    }
    server {
        listen 443 ssl;
        server_name commit.co.il localhost;

        resolver 169.254.169.253 ipv6=off;

        ssl_certificate /etc/openresty/nginx/ssl/commit.co.il.crt;
        ssl_certificate_key /etc/openresty/nginx/ssl/commit.co.il.key;

        location / {
            root   /usr/local/openresty/nginx/html;
            index  index.html index.htm;
        }
        location /favicon.ico {
            log_not_found off;
        }

        location /query {
            content_by_lua '
                local mysql = require "resty.mysql"
                local db, err = mysql:new()
                if not db then
                    ngx.say("failed to instantiate mysql: ", err)
                    return
                end

                db:set_timeout(2000) -- 2 sec

                local resolved_host, _, err = ngx.re.gsub(ngx.var.host, "database-1.c70a0kyy8u68.eu-central-1.rds.amazonaws.com", "RESOLVED_IP")
                if not resolved_host then
                    ngx.log(ngx.ERR, "failed to replace hostname: ", err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    return
                end
                
                local ok, err, errcode, sqlstate = db:connect{
                    host = "example-host",
                    port = 3306,
                    database = "example-db",
                    user = "example-user",
                    password = "example-password",
                    charset = "utf8",
                    max_packet_size = 1024 * 1024,
                }

                if not ok then
                    ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                    return
                end

                -- ngx.say("connected to mysql.")

                -- run a select query
                res, err, errcode, sqlstate =
                    db:query("SELECT * FROM employees", 10)
                if not res then
                    ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                    return
                end

                local cjson = require "cjson"
                -- ngx.say("result: ", cjson.encode(res))

                -- Output the JSON response to the browser
                ngx.header.content_type = "application/json"
                -- ngx.print(ngx.header.content_type)
                ngx.print(cjson.encode(res))

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle timeout
                local ok, err = db:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = db:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            ';
        }
    }
}